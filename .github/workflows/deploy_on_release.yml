# workflow 이름 지정
name: Upload TestFlight

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]
    
jobs:
  deploy:
    runs-on: macos-latest
    env:
      # app archive 및 export 에 쓰일 환경 변수 설정
      XC_WORKSPACE: ${{ 'Thirty.xcworkspace' }}
      XC_SCHEME: ${{ 'Thirty' }}
      XC_ARCHIVE: ${{ 'Thirty.xcarchive' }}
      
      # certificate 
      ENCRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/certification.p12.gpg' }}
      DECRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/certification.p12' }}
      CERT_ENCRYPTION_KEY: ${{ secrets.CERTS_ENCRYPTION_PWD }} 
      
      # provisioning
      ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/Thirty_Distribution.mobileprovision.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/Thirty_Distribution.mobileprovision' }}
      PROVISIONING_ENCRYPTION_KEY: ${{ secrets.PROVISION_ENCRYPTION_PWD }}
      
      # p8
      AUTH_P8_FILE_PATH: ${{ '.github/secrets/AuthKey_3Z48FT269L.p8' }}
      
      # certification export key
      CERT_EXPORT_KEY: ${{ secrets.CERT_EXPORT_PWD }}
      
      KEYCHAIN: ${{ 'test.keychain' }}
      
    steps:
      # 단계별 task 를 나타낼 이름
      - name: Select latest Xcode
        run: "sudo xcode-select -s /Applications/Xcode.app"
      - name: Checkout project
        uses: actions/checkout@v2
      - name: Configure Keychain 
        run: |
          security create-keychain -p "" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings
      - name : Configure Code Signing
        run: |
          # certificate 복호화
          gpg -d -o "$DECRYPTED_CERT_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERT_ENCRYPTION_KEY" "$ENCRYPTED_CERT_FILE_PATH"
          # provisioning 복호화
          gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_PROVISION_FILE_PATH"
          # security를 사용하여 인증서와 개인 키를 새로 만든 키 체인으로 가져옴
          security import "$DECRYPTED_CERT_FILE_PATH" -k "$KEYCHAIN" -P "$CERT_EXPORT_KEY" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          
          # Xcode에서 찾을 수 있는 프로비저닝 프로필 설치하기 위해 우선 프로비저닝 디렉토리를 생성
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          # 디버깅 용 echo 명령어
          echo `ls .github/secrets/*.mobileprovision`
            # 모든 프로비저닝 프로파일을 rename 하고 위에서 만든 디렉토리로 복사하는 과정
            for PROVISION in `ls .github/secrets/*.mobileprovision`
            do
              UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done
      - name: Archive app
        # 빌드 및 아카이브
        run: |
          pod install --repo-update --clean-install
          xcodebuild archive -workspace $XC_WORKSPACE -scheme $XC_SCHEME -configuration release -archivePath $XC_ARCHIVE -allowProvisioningUpdates
      - name: Export app
        # export 를 통해 ipa 파일 만듦
        run: |
          xcodebuild -exportArchive -archivePath $XC_ARCHIVE -exportOptionsPlist ExportOptions.plist -exportPath . -allowProvisioningUpdates
          
      - name: Install private API key P8
        run: | 
          mkdir -p ~/private_keys
          echo -n ${{ secrets.APPSTORE_API_KEY_ID }} | base64 --decode --output "$AUTH_P8_FILE_PATH"
          ls
#      - name: Upload app to TestFlight
#        uses: apple-actions/upload-testflight-build@v1
#        with:
#          app-path: 'Thirty.ipa'
#          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
#          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
#          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
      - name: Upload app to TestFlight
        env: 
          APPSTORE_API_KEY_ID: ${{ secrets.APPSTORE_API_KEY_ID }}
          run: |
            cd usket_TID
            ls
            xcrun altool --output-format xml --upload-app -fusket_TID.ipa -t ios --apiKey $APP_STORE_API_KEY_ID --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}
        
        
